/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.19
 * Generated at: 2024-10-30 12:26:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<title>Student Registration</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\r\n");
      out.write("    <script>\r\n");
      out.write("        function validateForm() {\r\n");
      out.write("            var emailPattern = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\r\n");
      out.write("            var passwordPattern = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@#$%&_]).{8,}$/;\r\n");
      out.write("            var email = document.forms[\"studentForm\"][\"email\"].value;\r\n");
      out.write("            var password = document.forms[\"studentForm\"][\"password\"].value;\r\n");
      out.write("\r\n");
      out.write("            if (!emailPattern.test(email)) {\r\n");
      out.write("                alert(\"Invalid email format\");\r\n");
      out.write("                return false;\r\n");
      out.write("            }\r\n");
      out.write("            if (!passwordPattern.test(password)) {\r\n");
      out.write("                alert(\"Password must contain uppercase, lowercase, number, and special character.\");\r\n");
      out.write("                return false;\r\n");
      out.write("            }\r\n");
      out.write("            return true;\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div\r\n");
      out.write("		class=\"container d-flex justify-content-center align-items-center min-vh-100\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		<div class=\"col-5 card p-5\">\r\n");
      out.write("			<h3 class=\"text-center text-success mb-5\">Registration Form</h3>\r\n");
      out.write("\r\n");
      out.write("			");

			String message = (String) request.getAttribute("message");

			if (message != null) {
			
      out.write("\r\n");
      out.write("			<div class=\"alert alert-success alert-dismissible fade show\"\r\n");
      out.write("				role=\"alert\">\r\n");
      out.write("				");
      out.print(message);
      out.write("\r\n");
      out.write("				<button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"\r\n");
      out.write("					aria-label=\"Close\"></button>\r\n");
      out.write("			</div>\r\n");
      out.write("			");

			}
			
      out.write("\r\n");
      out.write("\r\n");
      out.write("			");

			String error = (String) request.getAttribute("error");

			if (error != null) {
			
      out.write("\r\n");
      out.write("			<div class=\"alert alert-danger alert-dismissible fade show\"\r\n");
      out.write("				role=\"alert\">\r\n");
      out.write("				");
      out.print(error);
      out.write("\r\n");
      out.write("				<button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"\r\n");
      out.write("					aria-label=\"Close\"></button>\r\n");
      out.write("			</div>\r\n");
      out.write("			");

			}
			
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("			<form action=\"register\" method=\"post\">\r\n");
      out.write("				<div class=\"form-group mb-2\">\r\n");
      out.write("					<label class=\"form-label\">First Name</label> <input type=\"text\"\r\n");
      out.write("						class=\"form-control\" name=\"fname\" id=\"fname\" />\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"form-group mb-2\">\r\n");
      out.write("					<label class=\"form-label\">Last Name</label> <input type=\"text\"\r\n");
      out.write("						class=\"form-control\" name=\"lname\" id=\"lname\"/>\r\n");
      out.write("						\r\n");
      out.write("				</div>\r\n");
      out.write("				\r\n");
      out.write("\r\n");
      out.write("				<div class=\"form-group mb-2\">\r\n");
      out.write("					<label class=\"form-label\">Email Address</label> <input type=\"text\"\r\n");
      out.write("						class=\"form-control\" name=\"email\" id=\"email\"/>\r\n");
      out.write("						\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"form-group mb-2\">\r\n");
      out.write("					<label class=\"form-label\">Contact Number</label> <input type=\"text\"\r\n");
      out.write("						class=\"form-control\" name=\"contact\" id=\"contact\"/>\r\n");
      out.write("										</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"form-group mb-2\">\r\n");
      out.write("					<label class=\"form-label\">Password</label> <input type=\"text\"\r\n");
      out.write("						class=\"form-control\" name=\"password\" id=\"password\"/>\r\n");
      out.write("						\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div>\r\n");
      out.write("					<input type=\"submit\" class=\"btn btn-success me-3\" id=\"submitButton\"\r\n");
      out.write("						value=\"Submit\"> <input type=\"reset\"\r\n");
      out.write("						class=\"btn btn-primary  me-3\" id=\"resetButton\" value=\"Reset\">\r\n");
      out.write("					<!-- <a href=\"ShowStudenServlet\" class=\"btn btn-warning\">View Users</a>  -->\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("			</form>\r\n");
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
