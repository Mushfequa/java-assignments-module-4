package com;

import jakarta.servlet.FilterChain;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.annotation.WebFilter;
import jakarta.servlet.http.HttpFilter;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebFilter("/register")
public class RegisterFilter extends HttpFilter {
	
	@Override
	protected void doFilter(HttpServletRequest req,HttpServletResponse resp,FilterChain chain)
	{
		String fname =req.getParameter("fname");
		String lname =req.getParameter("lname");

		String email =req.getParameter("email");
		String contact =req.getParameter("contact");
		String gender =req.getParameter("gender");

		String password =req.getParameter("password");
		
try {
			
			RequestDispatcher dispatcher = req.getRequestDispatcher("register.jsp");
			
			
			if(fname == null || fname.isBlank()) {
				// navigate to register.jsp with error
				req.setAttribute("fnameError", "First name required");
				dispatcher.forward(req, resp);
				return;
				
			}
			
			if(lname == null || lname.isBlank()) {
				// navigate to register.jsp with error
				req.setAttribute("lnameError", "Last name required");
				dispatcher.forward(req, resp);
				return;
				
			}
			
			
			if(email == null || email.isBlank()) {
				// navigate to register.jsp with error
				req.setAttribute("emailError", "Email is required");
				dispatcher.forward(req, resp);
				return;
			}
			
			  if(!AppUtil.isValidEmail(email)) {
	            	 
	            	 //navigate to register.jsp with error
	            	 
	            	 req.setAttribute("emailError", " Invalid email address");
	 				dispatcher.forward(req, resp);
	 				return;
	 			
	             }
	             
	             
	             
	             if(contact == null || contact.isBlank()) {
	 				
	 				//navigate to register.jsp with error
	 				
	 				req.setAttribute("contactError", "Invalid contact number");
	 				dispatcher.forward(req, resp);
	 				return;
	 				
	             }
	             
	             if(gender == null || gender.isBlank()) {
	 				// navigate to register.jsp with error
	 				req.setAttribute("genderError", "gender  required");
	 				dispatcher.forward(req, resp);
	 				return;
	 				
	 			}
	 			
	             
	             if(password == null|| password.isBlank()) {
	            	 
	            	 //navigate to register.jsp with error
	            	 req.setAttribute("passwordError", "password is required");
	            	 dispatcher.forward(req, resp);
	            	 return;
	            	 
	             }
	             
	             if(!AppUtil.isValidPassword(password)) {
	            	 //navigate to register.jsp with error
	            	 req.setAttribute("passwordError", "Invalid password ");
	            	 dispatcher.forward(req, resp);
	            	 return;
	            	 
	             }
	 				//navigate to servlet
	 	
			
				chain.doFilter(req, resp);

			
					}catch (Exception e) {
				e.printStackTrace();
				 
			
	
}
	}
	}
