package com;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;

import Util.DatabaseUtil;
import jakarta.servlet.FilterChain;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpFilter;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/StudentServlet")

public class StudentServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");

        if ("add".equals(action)) {
            addStudent(request, response);
        } else if ("edit".equals(action)) {
            editStudent(request, response);
        } else if ("delete".equals(action)) {
            deleteStudent(request, response);
        }
    }
    
    
    	protected void doFilter(HttpServletRequest req,HttpServletResponse resp,FilterChain chain)
    	{
    		String fname =req.getParameter("fname");
    		String lname =req.getParameter("lname");

    		String email =req.getParameter("email");
    		String contact =req.getParameter("contact");
    		String gender =req.getParameter("gender");

    		String password =req.getParameter("password");
    		
    try {
    			
    			RequestDispatcher dispatcher = req.getRequestDispatcher("register.jsp");
    			
    			
    			if(fname == null || fname.isBlank()) {
    				
    				req.setAttribute("fnameError", "First name required");
    				dispatcher.forward(req, resp);
    				return;
    				
    			}
    			
    			if(lname == null || lname.isBlank()) {
    				
    				req.setAttribute("lnameError", "Last name required");
    				dispatcher.forward(req, resp);
    				return;
    				
    			}
    			
    			
    			if(email == null || email.isBlank()) {
    				
    				req.setAttribute("emailError", "Email is required");
    				dispatcher.forward(req, resp);
    				return;
    			}
    			
    			  if(!AppUtil.isValidEmail(email)) {
    	            	 
    	            	
    	            	 
    	            	 req.setAttribute("emailError", " Invalid email address");
    	 				dispatcher.forward(req, resp);
    	 				return;
    	 			
    	             }
    	             
    	             
    	             
    	             if(contact == null || contact.isBlank()) {
    	 				
    	 				
    	 				
    	 				req.setAttribute("contactError", "Invalid contact number");
    	 				dispatcher.forward(req, resp);
    	 				return;
    	 				
    	             }
    	             
    	             if(gender == null || gender.isBlank()) {
    	 				
    	 				req.setAttribute("genderError", "gender  required");
    	 				dispatcher.forward(req, resp);
    	 				return;
    	 				
    	 			}
    	 			
    	             
    	             if(password == null|| password.isBlank()) {
    	            	 
    	            	 
    	            	 req.setAttribute("passwordError", "password is required");
    	            	 dispatcher.forward(req, resp);
    	            	 return;
    	            	 
    	             }
    	             
    	             if(!AppUtil.isValidPassword(password)) {
    	            	
    	            	 req.setAttribute("passwordError", "Invalid password ");
    	            	 dispatcher.forward(req, resp);
    	            	 return;
    	            	 
    	             }
    	 				
    	 	
    			
    				chain.doFilter(req, resp);

    			
    					}catch (Exception e) {
    				e.printStackTrace();
    				 
    					}
    	
    }

    private void addStudent(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String fname = request.getParameter("fname");
        String lname = request.getParameter("lname");
        String email = request.getParameter("email");
        String contact = request.getParameter("contact");
        String gender = request.getParameter("gender");
        String password = request.getParameter("password");

        try {
            Connection con = DatabaseUtil.getConnection();
            PreparedStatement ps = con.prepareStatement("INSERT INTO students (fname, lname, email, mobile, gender, password) VALUES (?, ?, ?, ?, ?, ?)");
            ps.setString(1, fname);
            ps.setString(2, lname);
            ps.setString(3, email);
            ps.setString(4, contact);
            ps.setString(5, gender);
            ps.setString(6, password);
            ps.executeUpdate();
            con.close();
            response.sendRedirect("student.jsp");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void editStudent(HttpServletRequest request, HttpServletResponse response) throws IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        String fname = request.getParameter("fname");
        String lname = request.getParameter("lname");
        String email = request.getParameter("email");
        String contact = request.getParameter("contact");
        String gender = request.getParameter("gender");
        String password = request.getParameter("password");

        try {
            Connection con = DatabaseUtil.getConnection();
            PreparedStatement ps = con.prepareStatement("UPDATE students SET fname=?, lname=?, email=?, mobile=?, gender=?, password=? WHERE id=?");
            ps.setString(1, fname);
            ps.setString(2, lname);
            ps.setString(3, email);
            ps.setString(4, contact);
            ps.setString(5, gender);
            ps.setString(6, password);
            ps.setInt(7, id);
            ps.executeUpdate();
            con.close();
            response.sendRedirect("student.jsp");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void deleteStudent(HttpServletRequest request, HttpServletResponse response) throws IOException {
        int id = Integer.parseInt(request.getParameter("id"));

        try {
            Connection con = DatabaseUtil.getConnection();
            PreparedStatement ps = con.prepareStatement("INSERT INTO deleted_data SELECT * FROM students WHERE id=?");
            ps.setInt(1, id);
            ps.executeUpdate();

            ps = con.prepareStatement("DELETE FROM students WHERE id=?");
            ps.setInt(1, id);
            ps.executeUpdate();
            con.close();
            response.sendRedirect("student.jsp");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

